rm(list=ls())
?rm
?mtcars
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/hw2')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/hw2')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/hw2')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/hw2')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/jhons')
?aes_string
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/hw2')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/hw2')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
names(mtcars)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/Homework/ShinyHomework/YuanAlexLi')
sum(c(1,2,3))
a = sum
a
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
loc = read.csv("loc.csv")
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
loc %>% filter(., pokemonId==pokeID[pokeID$Pokemon=="Pidgey", 1])
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/example1')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/example1')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/example1')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/example1')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/example1')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/example1')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
View(loc)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
?iconList
??iconList
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
?need
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
?need
?map_click
??map_click
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
?validate
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
?need
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/clickInputExp/click.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo-backup')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
icon_list = au %>% mutate(., icons=factor(pokemonId) %>% select(., icons)
)sp::SpatialPointsDataFrame(
sp::SpatialPointsDataFrame(
cbind(au[,3], au[,2]), data.frame(icons=icon_list)
)
poke = dbConnect(RSQLite::SQLite(), "poke.db.sqlite")
a = dbGetQuery(poke, "SELECT longitude, latitude FROM Australia") %>% head(10)
dbDisconnect(poke)
poke = dbConnect(RSQLite::SQLite(), "poke.db.sqlite")
a = dbGetQuery(poke, "SELECT longitude, latitude FROM Australia") %>% head(10)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo-backup')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
data(iris)
temp <- iris %>% group_by(Species) %>% summarize(mean.y = mean(Petal.Width))
head(temp)
data(iris)
temp <- iris %>% group_by(Species) %>% dplyr::summarize(mean.y = mean(Petal.Width))
temp
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/dynamicUI.R')$value)
print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/dynamicUI.R')$value)
library(shiny); print(source('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/dynamicUI.R')$value)
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/sidebar')
?dashboardSidebar
condition = "input.tabvals == 3",
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/sidebar')
?menuItem
?conditionalPanel
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
?menuItem
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
library(PASWR)
??select
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
tab2
tab2 = HairEyeColor[,,Sex="Female"][,1:2]
tab2
tab2Chi = chisq.test(tab2)
names(tab2Chi)
tab2Chi$stdres
tab2Chi$expected
(tab2Chi$observed-tab2Chi$expected)^2 / tab2Chi$expected
(tab2Chi$observed-tab2Chi$expected) / tab2Chi$expected
(tab2Chi$observed-tab2Chi$expected)^2 / tab2Chi$expected
sd(ctrlGroup$weight)
ctrlGroup = PlantGrowth %>% filter(group=="ctrl")
trt1Group = PlantGrowth %>% filter(group=="trt1")
trt2Group = PlantGrowth %>% filter(group=="trt2")
sd(ctrlGroup$weight)
sd(trt1Group$weight)
sd(trt2Group$weight)
tab2Chi$residuals
(tab2Chi$residuals)^2 / tab2Chi$expected
library(VIM) #For the visualization and imputation of missing values.
library(Hmisc) #Load the Harrell miscellaneous library.
set.seed(0)
iris.example$Sepal.Length = jitter(iris.example$Sepal.Length, factor = .5)
iris.example$Sepal.Width = jitter(iris.example$Sepal.Width, factor= .5)
iris.example = iris[, c(1, 2, 5)] #For illustration purposes, pulling only the
col.vec = c(rep("red", 50), #Creating a color vector for plotting purposes.
rep("green", 50),
rep("blue", 50))
missing.vector = c(41:50, 91:100, 141:150) #Inducing missing values on the Species
col.vec[missing.vector] = "purple" #Creating a new color vector to
library(deldir) #Load the Delaunay triangulation and Dirichelet tesselation library.
plot.tile.list(tile.list(info),
fillcol = col.vec[-missing.vector],
main = "Iris Voronoi Tessellation\nDecision Boundaries")
info = deldir(iris.example$Sepal.Length[-missing.vector],
iris.example$Sepal.Width[-missing.vector])
plot.tile.list(tile.list(info),
fillcol = col.vec[-missing.vector],
main = "Iris Voronoi Tessellation\nDecision Boundaries")
iris.imputed1NN = kNN(iris.example, k = 1)
iris.example$Species[missing.vector] = NA  #vector for each category.
iris.example
iris.imputed1NN = kNN(iris.example, k = 1)
table(iris$Species, iris.imputed1NN$Species)
sqrt(nrow(iris.example))
iris.imputed12NN = kNN(iris.example, k = 12)
table(iris$Species, iris.imputed12NN$Species)
complete = iris.example[-missing.vector, ]
missing = iris.example[missing.vector, -3]
complete
dim(complete)
missing
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
library(kknn) #Load the weighted knn library.
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
summary(iris.euclidean)
iris.manhattan = kknn(Species ~ ., complete, missing, k = 12, distance = 1)
summary(iris.manhattan)
library(VIM) #For the visualization and imputation of missing values.
md.pattern(sleep) #Can also view this information from a data perspective.
library(mice) #Load the multivariate imputation by chained equations library.
md.pattern(sleep) #Can also view this information from a data perspective.
aggr(sleep) #A graphical interpretation of the missing values and their
library(VIM)
library(mice)
aggr(titanic3)
library(PASWR)
aggr(titanic3)
aggr(titanic3)
aggr(titanic3)
aggr(titanic3)
?kknn
aggr(titanic3)
is.na(titanic3$age)
sum(is.na(titanic3$age))
sum(is.na(titanic3$fare))
sum(is.na(titanic3$body))
sum(is.na(titanic3$age)) / length(titanic3$age)
sum(is.na(titanic3$fare)) / length(titanic3$fare)
sum(is.na(titanic3$fare)) / length(titanic3$fare) * 100
sum(is.na(titanic3$body)) / length(titanic3$body) * 100
apply(titanic3, is.na)
sapply(titanic3, is.na)
apply(titanic3, 1, is.na)
?apply
View(titanic3)
md.pattern(titanic3)
dim(titanic3)
119/1309
1309-119
complete.cases(titanic3)
summary(complete.cases(titanic3))
complete.cases(titanic3)
str(complete.cases(titanic3))
md.pattern(titanic3)
sum(is.na(titanic3))
length(titanic3)
sum(is.na(titanic3))
1452
sum(is.na(titanic3)) / (dim(titanic3)[1] * dim(titanic3)[2])
aggr(titanic3)
aggr(titanic3)
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
?titanic3
library(Hmisc)
plot(titanic3$age)
hist(titanic3$age)
imputed.age = impute(titanic3$age, mean)
imputed.age = impute(as.character(titanic3$age), mean)
?impute
library(Hmisc)
imputed.age = impute(titanic3$age, mean)
rm(list=ls())
library(Hmisc)
library(PASWR)
imputed.age = impute(titanic3$age, mean)
aggr(titanic3)
imputed.age = impute(titanic3$age, mean)
library(PASWR)
library(VIM)
library(mice)
library(Hmisc)
imputed.age = impute(titanic3$age, mean)
?impute
imputed.age = impute(titanic3$age, fun=mean)
library(PASWR)
library(VIM)
library(mice)
library(Hmisc)
imputed.age <- impute(titanic3$age, mean)
library(PASWR)
library(VIM)
library(mice)
library(Hmisc)
imputed.age <- Hmisc::impute(titanic3$age, mean)
imputed.age
hist(imputed.age)
hist(titanic3$age)
hist(imputed.age)
hist(titanic3$age)
imputed.age <- Hmisc::impute(titanic3$age, random)
imputed.age <- Hmisc::impute(titanic3$age, "random")
imputed.age.mean <- Hmisc::impute(titanic3$age, mean)
imputed.age.rand <- Hmisc::impute(titanic3$age, "random")
hist(imputed.age.rand)
hist(titanic3$age)
hist(imputed.age.rand)
hist(imputed.age.mean)
hist(titanic3$age)
hist(imputed.age.rand)
hist(imputed.age.mean)
hist(titanic3$age)
hist(imputed.age.rand)
hist(titanic3$age)
hist(imputed.age.rand)
hist(titanic3$age)
hist(imputed.age.rand)
imputed.fare.rand <- Hmisc::impute(titanic3$fare, "random")
imputed.x2
imputed.fare.rand
summary(imputed.fare.rand)
set.seed(1314)
imputed.fare.rand <- Hmisc::impute(titanic3$fare, "random")
summary(imputed.fare.rand)
set.seed(1314)
imputed.age.mean <- Hmisc::impute(titanic3$age, mean)
imputed.age.rand <- Hmisc::impute(titanic3$age, "random")
plot(imputed.fare.rand, imputed.age.rand)
head(pclass)
names(titanic3)
titantic3$pclass
titanic3$pclass
plot(imputed.mean.rand, imputed.fare.rand)
plot(imputed.age.rand, imputed.fare.rand)
plot(imputed.fare.rand ~ imputed.age.rand, col=titanic3$pclass)
titanic3
View(titanic3)
?plot
?mosaicplot
plot(imputed.fare.rand ~ imputed.age.rand, col=titanic3$pclass)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 16, cex = .75)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
n
n
plot(imputed.fare.rand ~ imputed.age.rand, col=titanic3$pclass)
legend("topleft", c("2nd", "2nd", "3rd"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
plot(imputed.fare.rand ~ imputed.age.rand, col=titanic3$pclass)
legend("topleft", titanic3$pclass,
pch = 16, col = c("red", "green", "blue"), cex = .75)
legend("topleft", c("1nd", "2nd", "3rd"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
View(titanic3)
600-323
1309-227-323
col.vec = c(rep("blue", 323),
rep("red", 277),
rep("green", 759))
plot(imputed.fare.rand ~ imputed.age.rand, col=titanic3$pclass, col=col.vec)
plot(imputed.fare.rand ~ imputed.age.rand, col=titanic3$pclass, col=ifelse(titanic3$pclass=="1st", "red",
ifelse(titanic3$pclass=="2nd", "blue", "green")))
plot(imputed.fare.rand ~ imputed.age.rand, col=ifelse(titanic3$pclass=="1st", "red",
ifelse(titanic3$pclass=="2nd", "blue", "green")))
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
model = lm(Hwt~Bwt, data=cats)
library(MASS)
plot(cats$Bwt, cats$Hwt)
model = lm(Hwt~Bwt, data=cats)
summary(model)
plot(model)
conf.band = predict(model, interval = "confidence")
conf.band
pred.band = predict(model, interval = "prediction")
pred.band
plot(cats, xlab = "Body Weight", ylab = "Heart Weight",
main = "Scatterplot of Cats Dataset")
abline(model, lty = 2) #Plotting the regression line.
plot(cats, xlab = "Body Weight", ylab = "Heart Weight",
main = "Scatterplot of Cats Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$speed, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$speed, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$speed, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
plot(cats, xlab = "Body Weight", ylab = "Heart Weight",
main = "Scatterplot of Cats Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$speed, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$speed, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$speed, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
plot(cats)
cars #Investigating the cars dataset.
cats
plot(cats$Bwt, cats$Hwt, xlab = "Body Weight", ylab = "Heart Weight",
main = "Scatterplot of Cats Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
plot(cats$Bwt, cats$Hwt, xlab = "Body Weight", ylab = "Heart Weight",
main = "Scatterplot of Cats Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(cats$Bwt, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(cats$Bwt, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(cats$Bwt, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(cats$Bwt, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
conf.band
conf.band = predict(model, interval = "confidence")
pred.band = predict(model, interval = "prediction")
plot(cats$Bwt, cats$Hwt, xlab = "Body Weight", ylab = "Heart Weight",
main = "Scatterplot of Cats Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(cats$Bwt, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(cats$Bwt, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(cats$Bwt, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(cats$Bwt, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
cats$Bwt
new.cats = data.frame(c(2.8, 5, 10))
conf.band.new = predict(model, new.cats, interval = "confidence")
new.cats = data.frame("Bwt"=c(2.8, 5, 10))
new.cats
conf.band.new = predict(model, new.cats, interval = "confidence")
pred.band.new = predict(model, new.cats, interval = "prediction")
conf.band.new
pred.band.new
bc.cats = boxcox(model)
bc.cats = boxCox(model)
library(car)
model = lm(Hwt~Bwt, data=cats)
bc.cats = boxCox(model)
bc.cats
lambda = bc.cats$x[which(bc.cats$y == max(bc.cats$y))]
lambda
dist.bc.cats = (cats$Hwt^lambda - 1)/lambda
dist.bc.cats
model.bc = lm(dist.bc.cats ~ cats$Bwt)
model.bc
plot(cats$Bwt, dist.bc.cats)
plot(cats$Bwt, cats$Hwt)
plot(cats$Bwt, dist.bc.cats)
abline(model.bc$coefficients[1], model.bc$coefficients[2])
summary(model.bc)
plot(model.bc)
plot(model.bc)
shiny::runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
segments(cats$Bwt, cats$Hwt,
cats$Bwt, (model$coefficients[1] + model$coefficients[2]*cats$Bwt),
col = "red")
cats
runApp('D:/LiYuan/Data_Science/NYC DS Academy Bootcamp/ShinyProject/pokemongo')
library(shinyapps)
rsconnect::setAccountInfo(name='yali107', token='6E1E4B732C28AA1412B64FD88F0EE83D', secret='VGUrptgNkUizHcjEmSPtTP0hmLzVMTwLSGKC+Mga')
getwd()
setwd("D:\\LiYuan\\Data_Science\\NYC DS Academy Bootcamp\\ShinyProject\\pokemongo")
deployApp()
